<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:messageBoxes="clr-namespace:Chapter.Net.WPF.MessageBoxes">

    <Style x:Key="InvisibleToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="DarkTemplate" TargetType="{x:Type messageBoxes:MessageBoxExpander}">
        <ToggleButton x:Name="HeaderSite"
                      IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                      Style="{StaticResource InvisibleToggleButton}">
            <DockPanel>
                <Path x:Name="arrow"
                      Width="12"
                      Height="6"
                      VerticalAlignment="Center"
                      Data="M 0,0 L 6,6 12,0"
                      DockPanel.Dock="Left"
                      RenderTransformOrigin="0.5, 0.5"
                      Stretch="Fill"
                      Stroke="White"
                      StrokeThickness="2" />
                <Label Padding="6,0,0,0"
                       VerticalAlignment="Center"
                       Content="{TemplateBinding Header}"
                       Foreground="{TemplateBinding Foreground}" />
            </DockPanel>
        </ToggleButton>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="arrow" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform Angle="180" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="LightTemplate" TargetType="{x:Type messageBoxes:MessageBoxExpander}">
        <ToggleButton x:Name="HeaderSite"
                      IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                      Style="{StaticResource InvisibleToggleButton}">
            <DockPanel>
                <Path x:Name="arrow"
                      Width="12"
                      Height="6"
                      VerticalAlignment="Center"
                      Data="M 0,0 L 6,6 12,0"
                      DockPanel.Dock="Left"
                      RenderTransformOrigin="0.5, 0.5"
                      Stretch="Fill"
                      Stroke="#494949"
                      StrokeThickness="2" />
                <Label Padding="6,0,0,0"
                       VerticalAlignment="Center"
                       Content="{TemplateBinding Header}"
                       Foreground="{TemplateBinding Foreground}" />
            </DockPanel>
        </ToggleButton>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Setter TargetName="arrow" Property="RenderTransform">
                    <Setter.Value>
                        <RotateTransform Angle="180" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style BasedOn="{StaticResource {x:Type Expander}}" TargetType="{x:Type messageBoxes:MessageBoxExpander}">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Header" Value="{Binding CollapsedHeaderText, RelativeSource={RelativeSource Self}}" />
        <Setter Property="Margin" Value="10,0,0,0" />
        <Style.Triggers>
            <Trigger Property="IsExpanded" Value="True">
                <Setter Property="Header" Value="{Binding ExpandedHeaderText, RelativeSource={RelativeSource Self}}" />
            </Trigger>
            <DataTrigger Binding="{Binding ControlTheme, RelativeSource={RelativeSource AncestorType={x:Type messageBoxes:MessageBoxWindow}}}" Value="Dark">
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Template" Value="{StaticResource DarkTemplate}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ControlTheme, RelativeSource={RelativeSource AncestorType={x:Type messageBoxes:MessageBoxWindow}}}" Value="Light">
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="Template" Value="{StaticResource LightTemplate}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>